***********README e APRESENTAÇAO CANVA***********
- FALTA colocar o link da apresentação no Readme
  https://www.canva.com/design/DAEyeUU37YY/7r3nUZvVdhx6z_oHAsypYg/view?utm_content=DAEyeUU37YY&utm_campaign=designshare&utm_medium=link&utm_source=homepage_design_menu
- inserir o gif de teste no postman com fundo preto no CANVA e README

***********A FAZER***********

- Responder e-mail para formatura do Reprograma - Curriculo no site
- apagar as pastas node_modules dos outros projetos
- Documentação Swagger ou apiDoc - para gerar a documentação

***********ROTAS***********
    - Postman Atualizar Heroku - FALTA SOMENTE ADM com erro

***********ESTRUTURA DE CODIGOS ******************
PASTA MEDICINE:
    Controller - PUT - Aplicar validacoes























=======================================================================================================================================


VER DEPOIS: 
    Ver com Rafa como tratar as validações no proprio banco de dados
    Aplicar validação para tamanho da senha / e alfanumerica dos Adms - FAZER DEPOIS DA ENTREGA
    
    - No readme ajustar rotas: 
        /pharmacy/search?"informarcep"&"insiracidade" - ROTAS COM QUERY PARMS multiplos SÓ PRA ALGUNS GETS
        atenção aos gets mulplpipos boelando colocar só true or false

    MEDICINE
    Controller - estrutura do like no controller para somatizar os remedios de entrada, cod abaixo
    Models - incluir um item para Stok


***********TESTES  SEGUIR EX DARIELLY***********



***********TESTAR CODIGO DE ENTRADA ESTOQUE E PACTH***********
/*

//DAR ENTRADA NO REMEDIO
erro: 
"menssage": "Performing an update on the path '_id' would modify the immutable field '_id'" }

FAZER TESTE COM _ID 

const stokMedicine = async (req, res) => {
    try {
        const { _id } = req.params
        medicine = await MedicineSchema.findById(_id)

        medicine.stokMedicine += 1

        await MedicineSchema.updateOne(medicine)
        return res.status(200).send(medicine)
    } catch (error) {
        return res.status(404).send({ message: message.error })
    }
}

//DAR SAIDA NO REMEDIO
const dislike = async (req, res) => {
    try {
        const { id } = req.params
        livro = await Livros.findById(id)

        livro.likes -= 1

        await Livros.updateOne(livro)
        return res.status(200).send(livro)
    } catch (error) {
        return res.status(404).send({ message: 'Livro não encontrado' })
    }
}





==========================================================================================



CRIAR ESTRUTURA MVC

$ mkdir src // criar pasta
$ mkdir assets // pasta para imagens
$ touch server.js // criar arquivo server
$ touch .gitignore // criar ignore
$ touch .env // criar dot envi
$ touch .env.example // criar env example
$ cd src // entrar na pasta
$ mkdir controller database models routes // criar as 4 pastas
$ touch app.js // criar arquivo
$ cd .. /// sair do SRC

=================================================

INSTALANDO DEPENDÊNCIAS

$ npm init -y 
$ npm i express // bibliotecas node_modules
$ npm i cors
$ npm i -D nodemon

- Banco de Dados

$ npm i mongoose  // utilização banco de dados
$ npm i dotenv-safe  // para ocultar dados sensiveis

- Autenticação

$ npm i jsonwebtoken
$ npm i bcrypt 

==================================================

DEPOIS INSTALAÇÃO

- Alterar no Package.json exemplo:
"start": "nodemon server.js"

- Inserir no arquivo gitignore
node_modules/
.env

=================================================

CONFIGURANDO SERVIDOR

- Arquivo server.js, inserir:

const app = require('./src/app');
const PORT = 8888 ;

app.listen(PORT, () => console.log("Servidor rodando na porta " + PORT));


- Arquivo app.js inserir:

const express = require('express')
const cors = require('cors')

const app = express()

app.use(cors())
app.use(express.json())


module.exports = app

================================================

DEPOIS CONFIGURAR SERVER, DAR START
$npm start

================================================

CONFIGURANDO BANCO DE DADOS

Criar arquivo mongoConifg.js na pasta: src/database

- Arquivo mongoConfig, inserir:


const mongoose = require('mongoose')

const MONGODB_URI = process.env.MONGODB_URI

const connect = async () => {
    try {
        await mongoose.connect(MONGODB_URI,{
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
        console.log("Banco conectado :)")
    } catch (error) {
        console.log("Erro: ", error.message)
    }
}

module.exports = {
    connect
}


- Arquivo app.js inserir:

const express = require('express')
const cors = require('cors')
 
require('dotenv-safe').config()  <==================
const db = require('./database/mongoConfig') <==========

const app = express()

app.use(cors())
app.use(express.json())


db.connect()    <================ isso tem que ficar pra cima e nao aqui embaixo - Paula Allemand

module.exports = app


- Arquivo .env inserir:

MONGODB_URI = aqui vai a string de conexão do MongoDB sem aspas com login e senha


- Arquivo .env.example apenas inserir:

MONGODB_URI


=========================================================================================


TESTE 

CRIAR UMA PASTA FORA SRC:
__test__ (dois underline de cada lado)
add arquivo
calculadora.test.js  // a extenção é test.js
 
chamar o arquivo que tem as funções, neste caso o calculadora.js dentro da SRC


$npm install --save-dev jest
Alterar no script 

jest  //  só aplica o teste
ou
jest --coverage      /// esse tras a tabela

estartar
$npm run test


Jest mostra se seu codigo funcionando e retorna o esperado
Coverage - tabela que demonstra o quanto aquele codigo que vc fez para teste cobre o seu codigo em porcentagens, linha por linha.

Depois de startar o teste Coverage, vai abrir uma pasta automatica no seu projeto chamada:
COVERAGE 
dento dela outra chamada:
Icov-report
expande, vai na pasta calculadora.js.html  // com botao direito abre Open with Live server
vai abrir no navegador a pasta de demonstração dos teste.


Documentação
https://jestjs.io/pt-BR/docs/using-matchers


==============================================================================================================

AUTOMATIZANDO DOCUMENTAÇÃO COM SWAGGER 
https://www.letscode.com.br/blog/como-automatizar-documentacao-de-apis-rest-em-nodejs-com-swagger 

npm i body-parser
npm i swagger-autogen
npm i swagger-ui-express



======================================================================================================
NOTAS SOOBRE AUTENTICAÇÃO

** VS CODE:

Entrar no site http://travistidwell.com/jsencrypt/demo/ e copiar a chave publica.
Colar essa chave publica no SECRET no arquivo .env

** POSTAM:

Realizar um POST com o login para gerar o Token e copiar.
Na aba da collection, criar uma variavel {{TOKEN}} e colar o token gerado.

Quando for acessar uma rota privada, vc coloca a rota e depois vai no cabeçalho em Authorization
No Authorization selecionar Bearer Token e ao lado chamar a variabel {{TOKEN}} (talvez ela ja apareça automaticamente) e send.

** SOBRE AS PASTAS NO VS CODE, ESTRUTRA DO CODIGO

HELPERS - é apenas uma função que será chamada no controller, no caso o de ADM no verbo POST 
para criar registro com token - somente.

MIDDLEWARES - é um codigo completo, que é chamado nos arquivos da pasta ROUTES. Vc chama ele na hora de configurar a rota
que ele vai dentro do MIDDLEWARES conferir o token e se estiver ok, ele segue para o controller.verbo. Quanto vc chama ele vai tornar
rota privada.


